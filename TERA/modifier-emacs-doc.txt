

https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifier-Keys.html


49.3.7 Modifier Keys

The default key bindings in Emacs are set up so that modified alphabetical characters are case-insensitive. In other words, C-A does the same thing as C-a, and M-A does the same thing as M-a. This concerns only alphabetical characters, and does not apply to shifted versions of other keys; for instance, C-@ is not the same as C-2.

A Control-modified alphabetical character is generally considered case-insensitive: Emacs always treats C-A as C-a, C-B as C-b, and so forth. The reason for this is historical: In non-graphical environments there is no distinction between those keystrokes. However, you can bind shifted Control alphabetical keystrokes in GUI frames:


(global-set-key (kbd "C-S-n") #'previous-line)


For all other modifiers, you can make the modified alphabetical characters case-sensitive (even on non-graphical frames) when you customize Emacs. For instance, you could make M-a and M-A run different commands.

Although only the Control and Meta modifier keys are commonly used, Emacs supports three other modifier keys. These are called Super, Hyper, and Alt. Few terminals provide ways to use these modifiers; the key labeled Alt on most keyboards usually issues the Meta modifier, not Alt. The standard key bindings in Emacs do not include any characters with the Super and Hyper modifiers, and only a small number of standard key bindings use Alt. However, you can customize Emacs to assign meanings to key bindings that use these modifiers. The modifier bits are labeled as ‘s-’, ‘H-’ and ‘A-’ respectively.



Even if your keyboard lacks these additional modifier keys, you can enter it using C-x @:

C-x @ h adds the Hyper flag to the next character,
C-x @ s adds the Super flag, and
C-x @ a adds the Alt flag.

For instance,
C-x @ h C-a is a way to enter Hyper-Control-a.

(Unfortunately, there is no way to add two modifiers by using C-x @ twice for the same character, because the first one goes to work on the C-x.)


Next: Rebinding Function Keys, Previous: Rebinding Keys in Your Init File, Up: Customizing Key Bindings   [Contents][Index]






https://memo.sugyan.com/entry/20120228/1330392943

すぎゃーんメモ
2012-02-28
ターミナル上のEmacsで本来使えない"Ctrlキー+何か"を使う方法

Emacsにはデフォルトで以下のように修飾キーを押しながらキーを押したとみなすような関数が定義されているそうで

C-x @ S         event-apply-shift-modifier
C-x @ a         event-apply-alt-modifier
C-x @ c         event-apply-control-modifier
C-x @ h         event-apply-hyper-modifier
C-x @ m         event-apply-meta-modifier
C-x @ s         event-apply-super-modifier

"C-x @ c ;" と押せば C-; を押したのと同じ効果が得られるようです。


Shift modifierの例

iTerm2-Preference-Profiles-Keys-(Default)-Key Mappings
mod  Send Hex Codes: 0x18 0x40 0x53 0x01     ^⬆︎A
mod  Send Hex Codes: 0x18 0x40 0x53 0x02     ^⬆b
mod  Send Hex Codes: 0x18 0x40 0x53 0x05     ^⬆e
mod  Send Hex Codes: 0x18 0x40 0x53 0x06     ^⬆f
mod  Send Hex Codes: 0x18 0x40 0x53 0x0E     ^⬆n
mod  Send Hex Codes: 0x18 0x40 0x53 0x10     ^⬆p
mod  Send Hex Codes: 0x18 0x40 0x53 0x16     ^⬆v
mod                  C-x   @   S    ^A ... ^V

NG  C-M-S-n/p
NG  Send Hex Codes: 0x1B 0x18 0x40 0x53 0x0E     ^opt⬆n
NG  Send Hex Codes: 0x1B 0x18 0x40 0x53 0x10     ^opt⬆p
NG                 ESC  C-x   @    S   ^N ... P
NG  in lisp-mode
NG  C-M-x runs the command eval-defun

     Esc + C-S-a を C-M-S-a として打てるようにする
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x01     ^⬆︎A
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x02     ^⬆b
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x05     ^⬆e
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x06     ^⬆f
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x0E     ^⬆n
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x10     ^⬆p
Send Hex Codes: 0x1B 0x73 0x40 0x53 0x16     ^⬆v
                 Esc   s    @   S    ^A ... ^V

Super modifier の例
Send Hex Codes: 0x18 0x40 0x73 0x61     🍀a
Send Hex Codes: 0x18 0x40 0x73 0x63     🍀c
Send: "\es@sf                           🍀f
Send Hex Codes: 0x18 0x40 0x73 0x76     🍀v
Send Hex Codes: 0x18 0x40 0x73 0x78     🍀x
Send Hex Codes: 0x18 0x40 0x73 0x7a     🍀z
               C-x   @   s    a ... z

Send Hex Codes: 0x18 0x40 0x73 0x44     ⬆🍀D
Send: "\es@sF                           ⬆🍀F
Send Hex Codes: 0x18 0x40 0x73 0x4C     ⬆🍀L
Send Hex Codes: 0x18 0x40 0x73 0x4D     ⬆🍀M
               C-x   @   s    A ... Z



C-M-S-send-test.txt
C-M-S-n, C-M-S-p は送信できるか?

C-M-n (translated from C-M-S-n) runs the command forward-list
C-M-p (translated from C-M-S-p) runs the command backward-list

これはターミナルの emacs -nw でできるか??


1. Esc + S + ^N/^P 案 ... 没

0x1b 0x18 0x40 0x53 0x0E
0x1b 0x18 0x40 0x53 0x10
Esc   ^X    @    S   ^N
Esc   ^X    @    S   ^P
Esc---C-x

14	0E	016	^N		SO	シフトアウト
16	10	020	^P		DLE	データリンクエスケープ
24	18	030	^X		CAN	取消
27	1B	033	^[	'\x1B'	ESC	(制御コード)エスケープ \e
64	40	100	@
83	53	123	S
99	63	143	c
115	73	163	s

一見うまくいくかに思えたが、
lisp-modeでは、先頭の Esc C-x の部分が
C-M-x (translated from <escape> C-x) runs the command eval-defun
となるのでかち合う
@S が画面に出た。

1.5 ヒント M-s o (occur) とかのマルチキーバインドを利用
Esc M-s @ S ^N とすればできるのではないか ... OK

;;simple.el　の定義をコビーしてくる
(define-key function-key-map [?\C-x ?@ ?S] 'event-apply-shift-modifier)
変更
(define-key function-key-map [?\M-s ?@ ?S] 'event-apply-shift-modifier)
(define-key function-key-map [?\M-s ?@ ?s] 'event-apply-super-modifier)
0x1b 0x1b 0x73 0x40 0x53 0x01
Esc  Esc    s    @    S   ^A
0x1b 0x1b 0x73 0x40 0x53 0x02
Esc  Esc    s    @    S   ^B
0x1b 0x1b 0x73 0x40 0x53 0x04
Esc  Esc    s    @    S   ^D
0x1b 0x1b 0x73 0x40 0x53 0x05
Esc  Esc    s    @    S   ^E
0x1b 0x1b 0x73 0x40 0x53 0x06
Esc  Esc    s    @    S   ^F
0x1b 0x1b 0x73 0x40 0x53 0x0C
Esc  Esc    s    @    S   ^L
0x1b 0x1b 0x73 0x40 0x53 0x0E
Esc  Esc    s    @    S   ^N
0x1b 0x1b 0x73 0x40 0x53 0x10
Esc  Esc    s    @    S   ^P
0x1b 0x1b 0x73 0x40 0x53 0x15
Esc  Esc    s    @    S   ^U
0x1b 0x1b 0x73 0x40 0x53 0x16
Esc  Esc    s    @    S   ^V
できた

M-s-f や M-s-F (Meta Super f/F) という、正規表現検索のキーバインドがあるので
Send: "\es@sf                           🍀f
Send: "\es@sF                           ⬆🍀F
Send: "\e\es@sf                         opt 🍀f
Send: "\e\es@sF                         opt ⬆🍀F
このようにした。



2. S + M-^n/^p 案  .. 没

0x18 0x40 0x53 0x8e
0x18 0x40 0x53 0x90
 ^X    @    S   M-^N
 ^X    @    S	M-^P

\216 is undefined
\220 is undefined

142	8E	216	M-^N
144	90	220	M-^P



3. Cntl + M-N/P 案  .. 没

0x18 0x40 0x63 0xce
0x18 0x40 0x63 0xd0
 ^X    @    c   M-N
 ^X    @    c   M-P

C-î is undefined
C-ð is undefined

206	CE	316	M-N	ﾎ
208	D0	320	M-P	ﾐ


参考 コントロールコード

0	00	000	^@	'\0'	NUL	ヌル
1	01	001	^A		SOH	ヘッダ開始
2	02	002	^B		STX	テキスト開始
3	03	003	^C		ETX	テキスト終了
4	04	004	^D		EOT	転送終了
5	05	005	^E		ENQ	紹介
6	06	006	^F		ACK	受信OK
7	07	007	^G	'\a'	BEL	ベル 警告
8	08	010	^H	'\b'	BS	バックスペース
9	09	011	^I	'\t'	HT	水平タブ
10	0A	012	^J	'\n'	LF/NL	復帰/改行
11	0B	013	^K		VT	垂直タブ
12	0C	014	^L	'\f'	FF	改ページ
13	0D	015	^M	'\r'	CR	復帰
14	0E	016	^N		SO	シフトアウト
15	0F	017	^O		SI	シフトイン
16	10	020	^P		DLE	データリンクエスケープ
17	11	021	^Q		DC1	制御装置1
18	12	022	^R		DC2	制御装置2
19	13	023	^S		DC3	制御装置3
20	14	024	^T		DC4	制御装置4
21	15	025	^U		NAC	受信失敗
22	16	026	^V		SYN	同期
23	17	027	^W		ETB	転送ブロック終了
24	18	030	^X		CAN	取消
25	19	031	^Y		EM	メディア終了
26	1A	032	^Z		SUB	置換           EOF 制御コード
27	1B	033	^[	'\x1B'	ESC	(制御コード)エスケープ \e
28	1C	034	^\		FS	ファイルセパレータ
29	1D	035	^]		GS	グループセパレータ
30	1E	036	^^		RS	レコードセパレータ
31	1F	037	^_		US	ユニットセパレータ
32	20	040	 		SP	(半角)スペース         \s


付録

これをターミナルでやりたい
C-S-<backspace>			kill-whole-line
1.
C-S-h をやってみる
Send Hex Codes: 0x18 0x40 0x53 0x08     ^⬆h
C-h (translated from C-x @ S) runs the command backward-delete-char-untabify
2.
M-[ 3 ; 6 ~	C-S-<delete>
Send ^[ [3;6~   ^⬆️ ← delete
C-<delete> runs the command kill-word
3.
(define-key input-decode-map "\e[3;6~" (kbd "C-S-<backspace>"))
C-S-<backspace> runs the command kill-whole-line
やった。
