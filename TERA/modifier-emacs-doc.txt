

https://www.gnu.org/software/emacs/manual/html_node/emacs/Modifier-Keys.html


49.3.7 Modifier Keys

The default key bindings in Emacs are set up so that modified alphabetical characters are case-insensitive. In other words, C-A does the same thing as C-a, and M-A does the same thing as M-a. This concerns only alphabetical characters, and does not apply to shifted versions of other keys; for instance, C-@ is not the same as C-2.

A Control-modified alphabetical character is generally considered case-insensitive: Emacs always treats C-A as C-a, C-B as C-b, and so forth. The reason for this is historical: In non-graphical environments there is no distinction between those keystrokes. However, you can bind shifted Control alphabetical keystrokes in GUI frames:


(global-set-key (kbd "C-S-n") #'previous-line)


For all other modifiers, you can make the modified alphabetical characters case-sensitive (even on non-graphical frames) when you customize Emacs. For instance, you could make M-a and M-A run different commands.

Although only the Control and Meta modifier keys are commonly used, Emacs supports three other modifier keys. These are called Super, Hyper, and Alt. Few terminals provide ways to use these modifiers; the key labeled Alt on most keyboards usually issues the Meta modifier, not Alt. The standard key bindings in Emacs do not include any characters with the Super and Hyper modifiers, and only a small number of standard key bindings use Alt. However, you can customize Emacs to assign meanings to key bindings that use these modifiers. The modifier bits are labeled as ‘s-’, ‘H-’ and ‘A-’ respectively.



Even if your keyboard lacks these additional modifier keys, you can enter it using C-x @:

C-x @ h adds the Hyper flag to the next character,
C-x @ s adds the Super flag, and
C-x @ a adds the Alt flag.

For instance,
C-x @ h C-a is a way to enter Hyper-Control-a.

(Unfortunately, there is no way to add two modifiers by using C-x @ twice for the same character, because the first one goes to work on the C-x.)


Next: Rebinding Function Keys, Previous: Rebinding Keys in Your Init File, Up: Customizing Key Bindings   [Contents][Index]






https://memo.sugyan.com/entry/20120228/1330392943

すぎゃーんメモ
2012-02-28
ターミナル上のEmacsで本来使えない"Ctrlキー+何か"を使う方法

Emacsにはデフォルトで以下のように修飾キーを押しながらキーを押したとみなすような関数が定義されているそうで

C-x @ S         event-apply-shift-modifier
C-x @ a         event-apply-alt-modifier
C-x @ c         event-apply-control-modifier
C-x @ h         event-apply-hyper-modifier
C-x @ m         event-apply-meta-modifier
C-x @ s         event-apply-super-modifier

"C-x @ c ;" と押せば C-; を押したのと同じ効果が得られるようです。




iTerm2-Preference-Profiles-Keys-(Default)-Key Mappings
Send Hex Codes: 0x18 0x40 0x53 0x01     ^⬆︎A
Send Hex Codes: 0x18 0x40 0x53 0x02     ^⬆b
Send Hex Codes: 0x18 0x40 0x53 0x05     ^⬆e
Send Hex Codes: 0x18 0x40 0x53 0x06     ^⬆f
Send Hex Codes: 0x18 0x40 0x53 0x0E     ^⬆n
Send Hex Codes: 0x18 0x40 0x53 0x10     ^⬆p
Send Hex Codes: 0x18 0x40 0x53 0x16     ^⬆v
               C-x   @   S    ^A ... ^V

Send Hex Codes: 0x18 0x40 0x73 0x61     🍀a
Send Hex Codes: 0x18 0x40 0x73 0x63     🍀c
Send Hex Codes: 0x18 0x40 0x73 0x76     🍀v
Send Hex Codes: 0x18 0x40 0x73 0x78     🍀x
Send Hex Codes: 0x18 0x40 0x73 0x7a     🍀z
               C-x   @   s    a ... z

NG  C-M-S-n/p
NG  Send Hex Codes: 0x1B 0x18 0x40 0x53 0x0E     ^opt⬆n
NG  Send Hex Codes: 0x1B 0x18 0x40 0x53 0x10     ^opt⬆p
NG                 ESC  C-x   @    S   ^N ... P
NG  in lisp-mode
NG  C-M-x runs the command eval-defun


これをターミナルでやりたい
C-S-<backspace>			kill-whole-line
1.
C-S-h をやってみる
Send Hex Codes: 0x18 0x40 0x53 0x08     ^⬆h
C-h (translated from C-x @ S) runs the command backward-delete-char-untabify
2.
M-[ 3 ; 6 ~	C-S-<delete>
Send ^[ [3;6~   ^⬆️ ← delete
C-<delete> runs the command kill-word
3.
(define-key input-decode-map "\e[3;6~" (kbd "C-S-<backspace>"))
C-S-<backspace> runs the command kill-whole-line
やった
